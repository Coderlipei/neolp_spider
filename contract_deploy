# -*- coding: utf-8 -*-
"""
# @Time    : 2024/8/29 16:29
---------
@author: lipei
"""
from web3 import Web3
import json
from contract_api import get_demo_contract



def deploy_contract(sender_address, private_key):

    # 使用 Alchemy 提供的 URL 连接到 Sepolia 测试网
    # 主网
    # alchemy申请一个api接口
    infura_url = 'https://base-mainnet.g.alchemy.com/v2/_V'

    web3 = Web3(Web3.HTTPProvider(infura_url))

    # 检查是否连接成功
    if not web3.is_connected():
        raise Exception("Failed to connect to Ethereum testnet via Alchemy")
    
    # 智能合约的 ABI 和 Bytecode
    bytecode, abi = get_demo_contract()
    # bytecode = "0x..."  # 从编译结果中获取
    # abi = json.loads('[]')  # 从编译结果中获取

    # 创建合约实例
    contract = web3.eth.contract(abi=abi, bytecode=bytecode)

    # 获取当前的 nonce 值
    nonce = web3.eth.get_transaction_count(sender_address, "pending")
    gas_price = web3.eth.gas_price


    # 构建交易
    transaction = {
        # 'chainId': 84532,  # base-Sepolia 测试网的链ID, 8453是base主网
        'chainId' : 8453,
        'gas': 3000000,
        'gasPrice': web3.eth.gas_price,
        'nonce': nonce,
        'data': contract.bytecode  # 使用合约的字节码
    }

    # 签名交易
    signed_tx = web3.eth.account.sign_transaction(transaction, private_key)

    # 发送交易
    tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
    print(f"Deployment transaction hash: {web3.to_hex(tx_hash)}")

    # 等待交易确认
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Contract deployed at address: {tx_receipt.contractAddress}")
