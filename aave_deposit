# -*- coding: utf-8 -*-
"""
# @Time    : 2024/8/29 16:29
---------
@author: lipei
"""
import time

from web3 import Web3
import json
from contract_api import get_demo_contract, get_target_contract


def deposit(sender_address, private_key):
    """
    
    :param sender_address: 交互地址
    :param private_key: 交互地址的私钥
    :return: 
    """
    # 使用 Alchemy 提供的 URL 连接到 Sepolia 测试网
    # 主网
    infura_url = 'https://base-mainnet.g.alchemy.com/v2/'

    web3 = Web3(Web3.HTTPProvider(infura_url))

    # 检查是否连接成功
    if not web3.is_connected():
        raise Exception("Failed to connect to Ethereum testnet via Alchemy")



    # 智能合约的 ABI 和 Bytecode
    # 和目标智能合约交互的时候需要从区块浏览器里拷贝出目标合约的api
    # abi_file/aave/WrappedTokenGatewayV3.json 是我存目标合约api的文件地址，下面有目标合约的地址，可以自己拷贝放在对应文件里。
    contract_abi = get_target_contract('abi_file/aave/WrappedTokenGatewayV3.json')

    # 合约的合约地址
    contract_address = '0x8be473dCfA93132658821E67CbEB684ec8Ea2E74'
    contract = web3.eth.contract(address=contract_address, abi=contract_abi)

    # bytecode = "0x..."  # 从编译结果中获取
    # abi = json.loads('[]')  # 从编译结果中获取

    # # 创建合约实例
    # contract = web3.eth.contract(abi=abi, bytecode=bytecode)

    # 获取当前的 nonce 值
    nonce = web3.eth.get_transaction_count(sender_address, "pending")
    gas_price = web3.eth.gas_price

    # 存款参数构建
    referral_code = 0
    undefined = '0xA238Dd80C259a72e81d7e4664a9801593F98d1c5'
    onBehalfOf = sender_address

    # 构建交易
    transaction = contract.functions.depositETH(
        undefined,  # 第一个参数传递 WETH 地址
        onBehalfOf,
        referral_code
    ).build_transaction({
        'from': sender_address,
        'value': web3.to_wei(0.00001, 'ether'),  # 发送 0.00001 ETH
        'gas': 2000000,  # Gas 限额，根据需要调整
        'gasPrice': gas_price,  # Gas 价格，根据网络状况调整
        'nonce': nonce,
        'chainId': 8453  # base-Sepolia 的链 ID
    })

   

    # 签名交易
    signed_tx = web3.eth.account.sign_transaction(transaction, private_key)

    # 发送交易
    tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)

    # 等待交易确认
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Contract deployed at address: {tx_receipt.contractAddress}")
